@page "/"
@rendermode RenderMode.InteractiveWebAssembly
@using BlazorSample.Shared.Models
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Logging
@using AssemblyAI

<PageTitle>Transcribe file</PageTitle>
<div class="row flex-fill">
    <div class="col">
        <EditForm Model="FormModel" OnValidSubmit="Submit" FormName="TranscribeFileForm">
            <DataAnnotationsValidator/>
            <ValidationSummary/>
            <div class="mb-3">
                <label class="form-label" for="file">Upload audio file:</label>
                <InputFile class="form-control" id="file" @bind-Value="FormModel!.File" OnChange="SetFile"/>
            </div>
            <div class="mb-3">
                <label class="form-label" for="language">Select Language:</label>
                <InputSelect class="form-control" @bind-Value="FormModel!.LanguageCode" id="language">
                    <option selected="selected" value="ALD">Automatic Language Detection</option>
                    <option value="en_us">American English</option>
                    <option value="en_au">Australian English</option>
                    <option value="en_uk">British English</option>
                    <option value="zh">Chinese</option>
                    <option value="nl">Dutch</option>
                    <option value="fi">Finnish</option>
                    <option value="fr">French</option>
                    <option value="en">Global English</option>
                    <option value="de">German</option>
                    <option value="hi">Hindi</option>
                    <option value="it">Italian</option>
                    <option value="ja">Japanese</option>
                    <option value="ko">Korean</option>
                    <option value="pl">Polish</option>
                    <option value="pt">Portuguese</option>
                    <option value="ru">Russian</option>
                    <option value="es">Spanish</option>
                    <option value="tr">Turkish</option>
                    <option value="uk">Ukrainian</option>
                    <option value="vi">Vietnamese</option>
                </InputSelect>
            </div>
            <div class="mb-3">
                <button type="submit" class="btn btn-primary">Transcribe</button>
            </div>
        </EditForm>
    </div>
    <div class="col-6 d-flex">
        <textarea 
            class="form-control d-flex mb-2"
            readonly="readonly" 
            placeholder="Upload a file to transcribe."
            rows="20"
            style="width: 100%"
        >@Transcript</textarea>
    </div>
    <div class="col d-flex flex-column">
        <div class="p-2 flex-grow-1">
            @foreach (var message in LemurMessages)
            {
                @if (message.IsAssistantMessage)
                {
                    <div class="d-flex justify-content-end mb-1 me-2">
                        <span class="d-block p-2 bubble right">
                            @message.Message
                        </span>
                    </div>
                }
                else
                {
                    <div class="d-flex justify-content-start mb-1 ms-2">
                        <span class="d-block p-2 bubble left">@message.Message</span>
                    </div>
                }
            }
        </div>
        @if (IsLemurThinking)
        {
            <div class="px-2">LeMUR is thinking...</div> 
        }
        <EditForm Model="LemurFormModel" OnValidSubmit="AskQuestion">
            <div class="input-group p-2">
                    @* disabled="@(Transcript == null)" *@
                <InputText
                    type="text"
                    class="form-control"
                    placeholder="Ask Question"
                    @bind-Value="LemurFormModel!.Question"
                    required="required"/>
                    @* disabled="@(Transcript == null)" *@
                <button
                    class="btn btn-outline-secondary"
                    type="submit">
                    Send
                </button>
            </div>
        </EditForm>
    </div>
</div>

@code {

    [SupplyParameterFromForm] private TranscribeFileFormModel? FormModel { get; set; }
    [SupplyParameterFromForm] private LemurFormModel? LemurFormModel { get; set; }
    [Inject] private ILogger<TranscribeFile> Logger { get; set; }
    [Inject] private IFileTranscriber FileTranscriber { get; set; }
    [Inject] private IAskLemur AskLemur { get; set; }
    private Transcript? Transcript { get; set; }
    private List<LemurMessage> LemurMessages { get; } = [LemurMessage.FromAssistant("Ask a question about your transcript.")];
    private bool IsLemurThinking { get; set; }

    protected override void OnInitialized()
    {
        FormModel ??= new();
        LemurFormModel ??= new();
    }

    private void SetFile(InputFileChangeEventArgs e)
    {
        FormModel!.File = e.File;
    }

    private async Task Submit()
    {
        Transcript = await FileTranscriber.TranscribeFileAsync(FormModel!).ConfigureAwait(false);
    }

    private async Task AskQuestion()
    {
        var question = LemurFormModel!.Question;
        LemurFormModel.Question = "";
        LemurMessages.Add(LemurMessage.FromUser(question));
        IsLemurThinking = true;
        var response = await AskLemur.AskQuestionAsync(Transcript!.Id, question).ConfigureAwait(false);
        IsLemurThinking = false;
        LemurMessages.Add(LemurMessage.FromAssistant(response));
    }

}