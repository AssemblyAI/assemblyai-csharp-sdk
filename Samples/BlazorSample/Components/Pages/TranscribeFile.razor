@page "/"
@rendermode InteractiveServer
@using BlazorSample.Models
@using AssemblyAI

<PageTitle>Transcribe file</PageTitle>
<div class="row flex-fill">
    <div class="col">
        <EditForm Model="FormModel" OnValidSubmit="Submit" FormName="TranscribeFileForm">
            <DataAnnotationsValidator/>
            <ValidationSummary/>
            <div class="mb-3">
                <label class="form-label" for="file">Upload audio file:</label>
                <InputFile class="form-control" id="file" @bind-Value="FormModel!.File" OnChange="SetFile"/>
            </div>
            <div class="mb-3">
                <label class="form-label" for="language">Select Language:</label>
                <InputSelect class="form-control" @bind-Value="FormModel!.LanguageCode" id="language">
                    <option selected="selected" value="ALD">Automatic Language Detection</option>
                    <option value="en_us">American English</option>
                    <option value="en_au">Australian English</option>
                    <option value="en_uk">British English</option>
                    <option value="zh">Chinese</option>
                    <option value="nl">Dutch</option>
                    <option value="fi">Finnish</option>
                    <option value="fr">French</option>
                    <option value="en">Global English</option>
                    <option value="de">German</option>
                    <option value="hi">Hindi</option>
                    <option value="it">Italian</option>
                    <option value="ja">Japanese</option>
                    <option value="ko">Korean</option>
                    <option value="pl">Polish</option>
                    <option value="pt">Portuguese</option>
                    <option value="ru">Russian</option>
                    <option value="es">Spanish</option>
                    <option value="tr">Turkish</option>
                    <option value="uk">Ukrainian</option>
                    <option value="vi">Vietnamese</option>
                </InputSelect>
            </div>
            <div class="mb-3">
                <button type="submit" class="btn btn-primary">Transcribe</button>
            </div>
        </EditForm>
    </div>
    <div class="col-6 d-flex">
        <textarea 
            class="form-control d-flex mb-2"
            readonly="readonly" 
            placeholder="Upload a file to transcribe."
            rows="20"
            style="width: 100%"
        >@Transcript</textarea>
    </div>
    <div class="col">
        LeMUR
    </div>
</div>

@code {

    [SupplyParameterFromForm] public TranscribeFileFormModel? FormModel { get; set; }

    public Transcript Transcript { get; set; }

    [Inject] public AppState AppState { get; set; }
    [Inject] private ILogger<TranscribeFile> Logger { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }
    [Inject] private AssemblyAI AssemblyAIClient { get; set; }

    protected override void OnInitialized()
    {
        AppState.TopRowTitle = "Transcribe File";
        AppState.NotifyStateChanged();
        FormModel ??= new();
    }

    private void SetFile(InputFileChangeEventArgs e)
    {
        FormModel!.File = e.File;
    }

    private async Task Submit()
    {
        Logger.LogInformation("Submit called: Processing the form");
        await using var fileStream = FormModel.File.OpenReadStream(maxAllowedSize: 2_306_867_200);
        var fileUpload = await AssemblyAIClient.Files.Upload(await ReadToEndAsync(fileStream));
        Transcript = await AssemblyAIClient.Transcript.Create(new CreateTranscriptParameters
        {
            AudioUrl = fileUpload.UploadUrl,
            LanguageCode = new TranscriptLanguageCode(FormModel.LanguageCode)
        });
    }

    // TODO: Replace when stream is supported by SDK
    private static async Task<byte[]> ReadToEndAsync(Stream stream)
    {
        long originalPosition = 0;

        if (stream.CanSeek)
        {
            originalPosition = stream.Position;
            stream.Position = 0;
        }

        var totalBytesRead = 0;
        try
        {
            var readBuffer = new byte[4096];

            int bytesRead;

            while ((bytesRead = await stream.ReadAsync(readBuffer, totalBytesRead, readBuffer.Length - totalBytesRead).ConfigureAwait(false)) > 0)
            {
                totalBytesRead += bytesRead;

                if (totalBytesRead != readBuffer.Length) continue;
                var nextByte = stream.ReadByte();
                if (nextByte == -1) continue;
                var temp = new byte[readBuffer.Length * 2];
                Buffer.BlockCopy(readBuffer, 0, temp, 0, readBuffer.Length);
                Buffer.SetByte(temp, totalBytesRead, (byte)nextByte);
                readBuffer = temp;
                totalBytesRead++;
            }

            var buffer = readBuffer;
            if (readBuffer.Length == totalBytesRead) return buffer;
            buffer = new byte[totalBytesRead];
            Buffer.BlockCopy(readBuffer, 0, buffer, 0, totalBytesRead);

            return buffer;
        }
        finally
        {
            if (stream.CanSeek)
            {
                stream.Position = originalPosition;
            }
        }
    }

}